#include "Model.hpp"

namespace MinecraftGL
{
    Model::Model()
    {
        float pos[]
        {
            -0.500000, -0.500000, 0.500000,
             0.500000, -0.500000, 0.500000,
             -0.500000, 0.500000, 0.500000,
             0.500000, 0.500000, 0.500000,
             -0.500000, 0.500000, -0.500000,
             0.500000, 0.500000, -0.500000,
             -0.500000, -0.500000, -0.500000,
            0.500000, -0.500000, -0.500000
        };

        float tex[]
        {
            0.000000, 0.000000,
            1.000000, 0.000000,
            0.000000, 1.000000,
            1.000000, 1.000000
        };

        float norm[]
        {
            0.000000, 0.000000, 1.000000,
            0.000000, 1.000000, 0.000000,
            0.000000, 0.000000, -1.000000,
            0.000000, -1.000000, 0.000000,
            1.000000, 0.000000, 0.000000,
            -1.000000, 0.000000, 0.000000
        };

        float faces[]
        {
            1 , 1 , 1,   2 , 2 , 1,      3 , 3 , 1,
            3 , 3 , 1 ,     2 , 2 , 1,   4 , 4 , 1,

            3 , 1 , 2   ,4 , 2 , 2,      5 , 3 , 2,
            5 , 3 , 2 , 4 , 2 , 2,      6 , 4 , 2,

            5 , 4 , 3   ,6 , 3 , 3,     7 , 2 , 3,
            7 , 2 , 3   ,6 , 3 , 3,     8 , 1 , 3,

            7 , 1 , 4   ,8 , 2 , 4,     1 , 3 , 4,
            1 , 3 , 4   ,8 , 2 , 4,     2 , 4 , 4,

            2 , 1 , 5   ,8 , 2 , 5,     4 , 3 , 5,
            4 , 3 , 5 , 8 , 2 , 5,       6 , 4 , 5,

            7 , 1 , 6   ,1 , 2 , 6,      5 , 3 , 6,
            5 , 3 , 6   ,1 , 2 , 6,      3 , 4 , 6
        };

        //fill vertex buffer using the data above

        for (int i = 0; i < 36; i++)
        {
            Vertex v;
            v.mPosition = MGLMaths::Vec3f(pos[faces[i * 3] * 3 - 3], pos[faces[i * 3] * 3 - 2], pos[faces[i * 3] * 3 - 1]);
            v.mTexCoords = MGLMaths::Vec2f(tex[faces[i * 3 + 1] * 2 - 2], tex[faces[i * 3 + 1] * 2 - 1]);
            v.mNormal = MGLMaths::Vec3f(norm[faces[i * 3 + 2] * 3 - 3], norm[faces[i * 3 + 2] * 3 - 2], norm[faces[i * 3 + 2] * 3 - 1]);
            mVertexBuffer.push_back(v);
        }



    }

    void Model::Draw()
    {
    }
}